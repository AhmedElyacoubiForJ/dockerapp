services:
  # --------------------------------------------
  # üóÑÔ∏è PostgreSQL-Datenbank
  # --------------------------------------------
  db:
    image: postgres:16
    container_name: db_container
    environment:
      POSTGRES_DB: ${DB_APP:-postgres}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --------------------------------------------
  # üß≠ pgAdmin ‚Äì Web-Oberfl√§che f√ºr PostgreSQL
  # --------------------------------------------
  pgadmin:
    image: dpage/pgadmin4
    container_name: demo-pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: secret
    ports:
      - "8081:80"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./servers.json:/pgadmin4/servers.json
      - ./.pgpass:/pgpass

  # --------------------------------------------
  # üöÄ Spring Boot Anwendung
  # --------------------------------------------
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: myapp:distroless-image
    container_name: demo-app
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:${DB_PORT:-5432}/${DB_NAME:-postgres}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
      pgadmin:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 30s
      timeout: 3s
      retries: 3
      # start_period: 40s
    networks:
      - backend

# --------------------------------------------
# üì¶ Volumes ‚Äì f√ºr persistente Daten
# --------------------------------------------
volumes:
  pgdata:

networks:
  backend:
