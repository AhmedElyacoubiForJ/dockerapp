# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ðŸ“¦ Wann ist dieses Dockerfile relevant?
# â†’ Immer dann, wenn die Anwendung als Container ausgefÃ¼hrt werden soll.
#   z.B. lokal, in der Cloud oder in CI/CD-Pipelines.

# ðŸ”§ Was tut dieses Dockerfile?
# â†’ Es erstellt ein schlankes Docker-Image aus dem kompilierten Java-JAR,
#   basierend auf dem offiziellen OpenJDK-Image.

# ðŸ”„ Wie passt es in den Gesamt-Workflow?
# â†’ Nach dem Bauen der App mit Maven (`mvn clean package`) wird dieses Dockerfile verwendet,
#   um ein ausfÃ¼hrbares Image zu erzeugen.
#   Dieses Image kann dann mit `docker run` oder `docker compose` gestartet werden,
#   um die Anwendung bereitzustellen.

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€


# Nutze ein leichtes Java-Image
FROM openjdk:17-jdk-slim

# Kopiere das JAR ins Image
COPY target/dockerapp-0.0.1-SNAPSHOT.jar app.jar

# Starte die App
ENTRYPOINT ["java", "-jar", "/app.jar"]
